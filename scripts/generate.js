const fs = require('fs')
const path = require('path')

const COMPONENT_DIR = path.join(__dirname, '..', 'components')
const INDEX_DIR = path.join(__dirname, '..')
const ALLOWED_NODES = new Set(['svg', 'path'])
const IGNORED_NODES = new Set(['title'])
const IGNORED_ATTRS = new Set(['xmlns', 'data-name'])
const AUTOGENERATED_HEADER = '// AUTOGENERATED DO NOT MODIFY'

function generateRenderContent (node) {
  let body = ''
  let usedComponents = new Set()

  if (IGNORED_NODES.has(node.name) || !ALLOWED_NODES.has(node.name)) {
    return { usedComponents: [], body: '' }
  }

  usedComponents.add(node.name)
  const componentName = toPascalCase(node.name)
  body += `<${componentName}`

  let hasChildren = false
  const attrKeys = Object.keys(node.attrs)
  for (let attrKey of attrKeys) {
    if (IGNORED_ATTRS.has(attrKey)) {
      continue
    }
    body += ` ${attrKey}='${node.attrs[attrKey]}'`
  }

  if (node.childs) {
    let childrenBody = ''

    for (let childNode of node.childs) {
      const childData = generateRenderContent(childNode)
      childrenBody += childData.body
      Array.from(childData.usedComponents).forEach((c) => usedComponents.add(c))
    }

    if (childrenBody.length) {
      body += `>
        ${childrenBody}`
      hasChildren = true
    }
  }

  body += `${hasChildren ? `
      </${componentName}>` : '/>'}`

  return {
    usedComponents: usedComponents,
    body: body
  }
}

function generateHeader (usedSVGSet) {
  const usedSVGComponents = Array.from(usedSVGSet || [])

  return `${AUTOGENERATED_HEADER}
import React from 'react'

import {
  ${usedSVGComponents.map((c) => toPascalCase(c)).join(',\n\t')}
} from 'react-native-svg'`
}

function generateFooter (filename) {
  return `\nexport default ${getClassName(filename)}`
}

function generateBody (filename, svg) {
  return `
class ${getClassName(filename)} extends React.PureComponent {
  render () {
    return (
      ${svg}
    )
  }
}`
}

function toPascalCase (componentName = '') {
  if (!componentName.length) {
    return componentName
  }

  const firstChar = componentName.charAt(0).toUpperCase()
  if (componentName.length === 1) {
    return firstChar
  }

  return firstChar + componentName.substring(1)
}

function getClassName (filename) {
  if (!filename) {
    throw new Error('getClassName needs a filename')
  }

  const extCharPos = filename.indexOf('.')
  if (extCharPos === -1) {
    throw new Error('getClassName needs a filename with an extension')
  }

  const nameByParts = filename.substring(0, extCharPos).split('-')

  let className = ''
  for (let part of nameByParts) {
    className += toPascalCase(part)
  }

  return className
}

function makeReactComponent (filename, svgJSON) {
  const data = generateRenderContent(svgJSON)

  const fileContents = `${generateHeader(data.usedComponents)}
${generateBody(filename, data.body)}
${generateFooter(filename)}
  `

  fs.writeFileSync(path.join(COMPONENT_DIR, `${getClassName(filename)}.js`), fileContents)
}

function makeIndex (assets) {
  console.log('Generating index.js')

  const fileContents = `${AUTOGENERATED_HEADER}
import React from 'react'

${assets.map((asset) => {
  const className = getClassName(asset.filename)
  return `import ${className} from './components/${className}'`
}).join('\n')}

export {
  ${assets.map((asset) => getClassName(asset.filename)).join(',\n\t')}
}
  `

  fs.writeFileSync(path.join(INDEX_DIR, 'index.js'), fileContents)
}

module.exports = function generate (assets = []) {
  for (let asset of assets) {
    makeReactComponent(asset.filename, asset.svgJSON)
  }
  makeIndex(assets)
}
